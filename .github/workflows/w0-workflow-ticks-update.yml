name: 0. PKBrokers Market Hours Ticks Runner
on:
  schedule:
    # Run 20 minutes before NSE market open (9:00 AM IST = 3:30 AM UTC)
    - cron: '25 3 * * 1-5'  # Monday-Friday at 3:40 AM UTC (9:20 AM IST)
  workflow_dispatch:  # Allow manual triggering

jobs:
  market-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355  # Just under 6 hours (5h55m) to avoid being cutoff
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for holidays
      id: holiday_check
      run: |
        # Download the holidays JSON file
        curl -s -o holidays.json https://raw.githubusercontent.com/pkjmesra/PKScreener/main/.github/dependencies/nse-holidays.json
        
        # Get current date in DD-MMM-YYYY format (e.g., 26-Jan-2025)
        CURRENT_DATE=$(date +"%d-%b-%Y")
        
        # Check if current date is in holidays list
        if jq -e --arg date "$CURRENT_DATE" '.CM[] | select(.tradingDate == $date)' holidays.json > /dev/null; then
          echo "Today ($CURRENT_DATE) is a market holiday. Exiting."
          echo "is_holiday=true" >> $GITHUB_OUTPUT
        else
          echo "Today ($CURRENT_DATE) is not a market holiday. Proceeding."
          echo "is_holiday=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if holiday (scheduled runs only)
      if: github.event_name == 'schedule' && steps.holiday_check.outputs.is_holiday == 'true'
      run: |
        echo "Skipping execution due to market holiday."
        exit 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install PKBrokers
      run: pip install pkbrokers

    - name: Create .env.dev file with secrets
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        EOF
        
        echo "Created .env.dev file with secrets"

    - name: Run pkkite with intelligent restart
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Function to check if current time is within market hours
        check_market_hours() {
          current_utc=$(date -u +%H%M)
          day_of_week=$(date -u +%u)  # 1=Monday, 5=Friday
          
          # Check if it's a weekday (Monday-Friday)
          if [ "$day_of_week" -ge 1 ] && [ "$day_of_week" -le 5 ]; then
            # Market hours: 3:45 AM to 10:00 AM UTC (9:15 AM to 3:30 PM IST)
            # Extended hours: 3:25 AM to 10:10 AM UTC (8:55 AM to 3:40 PM IST)
            if [ "$current_utc" -ge 325 ] && [ "$current_utc" -le 1010 ]; then
              return 0  # Within market hours
            fi
          fi
          return 1  # Outside market hours
        }

        # Function to check if today is a holiday
        check_holiday() {
          # Download holidays file
          curl -s -o /tmp/holidays.json https://raw.githubusercontent.com/pkjmesra/PKScreener/main/.github/dependencies/nse-holidays.json
          
          # Get current date in DD-MMM-YYYY format
          CURRENT_DATE=$(date +"%d-%b-%Y")
          
          # Check if current date is in holidays list
          if jq -e --arg date "$CURRENT_DATE" '.CM[] | select(.tradingDate == $date)' /tmp/holidays.json > /dev/null; then
            return 0  # It's a holiday
          else
            return 1  # Not a holiday
          fi
        }

        # Function to calculate minutes remaining in market session
        get_minutes_remaining() {
          current_utc=$(date -u +%H%M)
          # Market closes at 10:00 AM UTC
          current_hour=$(date -u +%H)
          current_minute=$(date -u +%M)
          
          close_hour=10
          close_minute=0
          
          # Calculate minutes until market close
          minutes_remaining=$(( (close_hour * 60 + close_minute) - (current_hour * 60 + current_minute) ))
          echo $minutes_remaining
        }

        # Function to restart the workflow via API
        restart_workflow() {
          echo "Restarting workflow via GitHub API..."
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml/dispatches" \
            -d '{"ref":"${{ github.ref }}"}'
        }

        # Function to check if we're approaching the 6-hour timeout
        check_timeout_risk() {
          # GitHub Actions jobs can run max 6 hours (360 minutes)
          # We set timeout to 355 minutes to be safe
          # If we have less than 10 minutes until timeout AND we're still in market hours
          # we should restart to avoid being cut off
          minutes_remaining=$(get_minutes_remaining)
          if [ $minutes_remaining -gt 10 ] && check_market_hours; then
            return 0  # No immediate timeout risk
          else
            return 1  # At risk of timeout
          fi
        }

        # Main execution logic
        MAX_RETRIES=50  # Increased retries for continuous operation
        RETRY_COUNT=0
        
        # For manual runs, skip holiday check during execution and allow outside market hours
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          if check_holiday; then
            echo "Today is a market holiday. Exiting."
            exit 0
          fi
        else
          echo "Manual run detected - proceeding regardless of holiday or market hours"
          # For manual runs, we want to run at least once even outside market hours
          MANUAL_RUN=true
        fi
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # For manual runs, always execute regardless of market hours
          if [ "$MANUAL_RUN" = "true" ] || check_market_hours; then
            if [ "$MANUAL_RUN" = "true" ]; then
              echo "Manual run - executing pkkite --ticks (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            else
              echo "Within market hours. Running pkkite --ticks (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            fi
            
            # Check if we're at risk of hitting GitHub's 6-hour timeout (only for market hours)
            if check_market_hours && check_timeout_risk; then
              echo "Approaching GitHub timeout limit. Restarting workflow to continue..."
              restart_workflow
              break
            fi
            
            # Run pkkite and capture exit code
            pkkite --ticks
            EXIT_CODE=$?
            
            echo "pkkite exited with code $EXIT_CODE"
            
            # For manual runs, always retry regardless of exit code or market hours
            if [ "$MANUAL_RUN" = "true" ]; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Manual run - Retrying in 30 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 30
            # For scheduled runs, only retry if still within market hours
            elif check_market_hours; then
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Still within market hours. Retrying in 30 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 30
            else
              echo "Outside market hours. Exiting."
              break
            fi
          else
            echo "Outside market hours. Exiting."
            break
          fi
        done

        # If we hit max retries and still in market hours (or manual run), restart the workflow
        if [ $RETRY_COUNT -eq $MAX_RETRIES ] && ( [ "$MANUAL_RUN" = "true" ] || check_market_hours ); then
          echo "Max retries reached. Restarting workflow..."
          restart_workflow
        fi

    - name: Cleanup .env.dev file
      if: always()
      run: |
        echo "Cleaning up .env.dev file"
        rm -f .env.dev
