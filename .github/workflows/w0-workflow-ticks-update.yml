# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 0. 24x7 bot Ticks Runner
on:
  schedule:
    # Every 5 hours and 50 minutes
    - cron: '50 */5 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      logLevel:
        description: 'Log level for PKDevTools (default 20)'
        required: false
        default: 20
        type: number

jobs:
  market-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355  # Just under 6 hours (5h55m) to avoid being cutoff
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
    
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main

    # - name: Check for holidays
    #   id: holiday_check
    #   run: |
    #     # Download the holidays JSON file
    #     curl -s -o holidays.json https://raw.githubusercontent.com/pkjmesra/PKScreener/main/.github/dependencies/nse-holidays.json
        
    #     # Get current date in DD-MMM-YYYY format (e.g., 26-Jan-2025)
    #     CURRENT_DATE=$(date +"%d-%b-%Y")
        
    #     # Check if current date is in holidays list
    #     if jq -e --arg date "$CURRENT_DATE" '.CM[] | select(.tradingDate == $date)' holidays.json > /dev/null; then
    #       echo "Today ($CURRENT_DATE) is a market holiday. Exiting."
    #       echo "is_holiday=true" >> $GITHUB_OUTPUT
    #     else
    #       echo "Today ($CURRENT_DATE) is not a market holiday. Proceeding."
    #       echo "is_holiday=false" >> $GITHUB_OUTPUT
    #     fi

    # - name: Exit if holiday (scheduled runs only)
    #   if: github.event_name == 'schedule' && steps.holiday_check.outputs.is_holiday == 'true'
    #   run: |
    #     echo "Skipping execution due to market holiday."
    #     exit 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install PKBrokers dependencies
      run: |
        pip install -e .
        pip install kiteconnect

    - name: Create .env.dev file with secrets
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI_PAT: ${{ secrets.CI_PAT }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: "local"
        DB_TICKS: ${{ secrets.DB_TICKS }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
        BBTOKEN: ${{ secrets.BBTOKEN }}
        Tel_API_ID: ${{ secrets.Tel_API_ID }}
        Tel_API_Hash: ${{ secrets.Tel_API_Hash }}
        Tel_Phone_Number: ${{ secrets.Tel_Phone_Number }}
        TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        CI_PAT=$CI_PAT
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        DB_TICKS=$DB_TICKS
        TBTOKEN=$TBTOKEN
        BBTOKEN=$BBTOKEN
        Tel_API_ID=$Tel_API_ID
        Tel_API_Hash=$Tel_API_Hash
        Tel_Phone_Number=$Tel_Phone_Number
        TEL_SESSION_DATA=$TEL_SESSION_DATA
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file with secrets"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"

    - name: Create session file
      run: |
        echo ${{ env.TEL_SESSION_DATA }} | base64 -d > user_session.session
        chmod 600 user_session.session
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        echo ${{ env.TEL_SESSION_DATA }} | base64 -d > user_session.session
        chmod 600 user_session.session

    - name: Run pkkite orchestrator from source
      env:
        PYTHONUNBUFFERED: 1  # Force unbuffered output
        PKDevTools_Default_Log_Level: ${{ env.PKDevTools_Default_Log_Level }}
      run: |
        # Run pkkite directly from the source module
        echo "Running pkkite --orchestrate from PKBrokers source..."
        pwd
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        python pkkite.py --orchestrate --verbose 2>&1 | while IFS= read -r line; do
          # Print timestamp with each log line for better debugging
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $line"
        done
        
        EXIT_CODE=${PIPESTATUS[0]}
        echo "pkkite exited with code $EXIT_CODE"

    - name: Cleanup .env.dev file
      if: always()
      run: |
        echo "Cleaning up .env.dev file"
        rm -f .env.dev
        
    - name: Delete history of workflow runs
      shell: bash
      run: |
        gh run list --status completed --limit 100 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
        gh run list --status cancelled --limit 100 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
      env:
        GH_TOKEN : ${{secrets.GITHUB_TOKEN}}