name: 1.0 PKBrokers Historical Data Update Parent
on:
  schedule:
    - cron: '59 9 * * 1-6'  # Monday-Saturday at 3:30 PM IST, 10AM UTC
  workflow_dispatch:  # Allow manual triggering
    inputs:
      logLevel:
        description: 'Log level for PKDevTools (default 20)'
        required: false
        default: 20
        type: number
      periods:
        description: 'space-separated periods to run (default: all)'
        required: false
        default: 'day'
        type: string

jobs:
  holiday-check:
    runs-on: ubuntu-latest
    outputs:
      is_holiday: ${{ steps.check_holiday.outputs.is_holiday }}
    steps:
    - name: Check for holidays
      id: check_holiday
      run: |
        # Download the holidays JSON file
        curl -s -o holidays.json https://raw.githubusercontent.com/pkjmesra/PKScreener/main/.github/dependencies/nse-holidays.json
        
        # Get current date in DD-MMM-YYYY format (e.g., 26-Jan-2025)
        CURRENT_DATE=$(date +"%d-%b-%Y")
        
        # Check if current date is in holidays list
        if jq -e --arg date "$CURRENT_DATE" '.CM[] | select(.tradingDate == $date)' holidays.json > /dev/null; then
          echo "Today ($CURRENT_DATE) is a market holiday. Exiting."
          echo "is_holiday=true" >> $GITHUB_OUTPUT
        else
          echo "Today ($CURRENT_DATE) is not a market holiday. Proceeding."
          echo "is_holiday=false" >> $GITHUB_OUTPUT
        fi

  get-kite-token:
    needs: holiday-check
    if: (needs.holiday-check.outputs.is_holiday == 'false' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    timeout-minutes: 358
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
    outputs:
      kite_token: ${{ steps.get-token.outputs.kite_token }}
      token_valid: ${{ steps.validate-token.outputs.token_valid }}
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install PKBrokers dependencies
      run: |
        pip install -e .
        pip install kiteconnect

    - name: Create .env.dev file with secrets
      env:
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        KTOKEN: ${{ secrets.KTOKEN }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
        BBTOKEN: ${{ secrets.BBTOKEN }}
        Tel_API_ID: ${{ secrets.Tel_API_ID }}
        Tel_API_Hash: ${{ secrets.Tel_API_Hash }}
        Tel_Phone_Number: ${{ secrets.Tel_Phone_Number }}
        TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        KTOKEN=$KTOKEN
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        BBTOKEN=$BBTOKEN
        Tel_API_ID=$Tel_API_ID
        Tel_API_Hash=$Tel_API_Hash
        Tel_Phone_Number=$Tel_Phone_Number
        TEL_SESSION_DATA=$TEL_SESSION_DATA
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file with secrets"

    - name: Create session file
      run: |
        echo ${{ env.TEL_SESSION_DATA }} | base64 -d > user_session.session
        chmod 600 user_session.session
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        echo ${{ env.TEL_SESSION_DATA }} | base64 -d > user_session.session
        chmod 600 user_session.session
        
    - name: Run pkkite to get token
      id: get-token
      env:
        PYTHONUNBUFFERED: 1
      run: |
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        echo "Running pkkite --token to get Kite token..."
        # The python script will automatically write to GITHUB_OUTPUT
        python pkkite.py --token --verbose
        
        # No need to manually capture output - it's already in the outputs

    - name: Validate base64 token
      id: validate-token
      run: |
        # Access the output from get-token step
        KITE_TOKEN="${{ steps.get-token.outputs.kite_token }}"
        
        echo "Validating token: ${KITE_TOKEN:0:10}..."  # Show first 10 chars
        
        # Check if token is empty
        if [ -z "$KITE_TOKEN" ] || [ "$KITE_TOKEN" == "None" ] || [ "$KITE_TOKEN" == "null" ]; then
          echo "❌ Token is empty or invalid"
          echo "token_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Basic base64 validation - check characters
        if ! echo "$KITE_TOKEN" | grep -qE '^[A-Za-z0-9+/]*={0,2}$'; then
          echo "❌ Token contains invalid characters for base64"
          echo "token_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check length
        if [ ${#KITE_TOKEN} -lt 20 ]; then
          echo "❌ Token is too short for base64 (length: ${#KITE_TOKEN})"
          echo "token_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Test if it can be decoded
        if echo "$KITE_TOKEN" | base64 -d > /dev/null 2>&1; then
          echo "✅ Token is valid base64"
          echo "token_valid=true" >> $GITHUB_OUTPUT
          echo "kite_token=$KITE_TOKEN" >> $GITHUB_OUTPUT
        else
          echo "❌ Token failed base64 decoding validation"
          echo "token_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    # - name: Update Github Secret
    #   uses: NikhilVashistha/update-github-action-secret@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     repo_name: PKBrokers
    #     repo_owner_name: pkjmesra
    #     secret_name: 'KTOKEN'
    #     secret_value: ${{ steps.get-token.outputs.kite_token }}
    #     # variable: true # To update github repository variable
    #     # variable_name: 'VARIABLE_NAME' # Github Repository variable key name for update
    #     # variable_value: 'variable value' # Github Repository variable value to update
    # - name: Update secret with GitHub CLI
    #   run: |
    #     gh secret set KTOKEN --body "$SECRET_VALUE"
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SECRET_VALUE: ${{ steps.get-token.outputs.kite_token }}

  trigger-child-jobs:
    needs: [holiday-check, get-kite-token]
    if: (needs.holiday-check.outputs.is_holiday == 'false' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && needs.get-kite-token.outputs.token_valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 358
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || 20 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create .env.dev file with secrets
      env:
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        KTOKEN: ${{ needs.get-kite-token.outputs.kite_token }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
        BBTOKEN: ${{ secrets.BBTOKEN }}
        Tel_API_ID: ${{ secrets.Tel_API_ID }}
        Tel_API_Hash: ${{ secrets.Tel_API_Hash }}
        Tel_Phone_Number: ${{ secrets.Tel_Phone_Number }}
        TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        KTOKEN=$KTOKEN
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        BBTOKEN=$BBTOKEN
        Tel_API_ID=$Tel_API_ID
        Tel_API_Hash=$Tel_API_Hash
        Tel_Phone_Number=$Tel_Phone_Number
        TEL_SESSION_DATA=$TEL_SESSION_DATA
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file with secrets"

    - name: Trigger child jobs with valid token
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use the periods input or default to all periods
        if [ -n "${{ github.event.inputs.periods }}" ]; then
          periods="${{ github.event.inputs.periods }}"
        else
          periods="day minute 5minute 10minute 15minute 30minute 60minute"
        fi
        
        echo "Triggering child jobs for periods: $periods"
        echo "Using Kite token from previous job output"
        
        for period in $periods; do
          echo "Triggering workflow for period: $period"
          
          LOG_LEVEL="${{ github.event.inputs.logLevel || '20' }}"
          
          # Trigger child workflow with token as input
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/w1-workflow-history-data-child.yml/dispatches" \
            -d "{\"ref\":\"main\",\"inputs\":{\"period\":\"$period\",\"logLevel\":\"$LOG_LEVEL\",\"kiteToken\":\"${{ needs.get-kite-token.outputs.kite_token }}\"}}"
          
          sleep 2
        done

    - name: Send notification about the trigger
      shell: bash
      env:
          THIS_KITE_PERIOD : ${{ github.event.inputs.periods }}
          THIS_KITE_TOKEN: ${{ needs.get-kite-token.outputs.kite_token }}
      run: |
        pip install pkdevtools
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        python3 -c "import os; from PKDevTools.classes.Telegram import send_message; send_message('✅ Successfully triggered all child jobs with valid Kite token:(' + os.environ['THIS_KITE_TOKEN'] + ') for period: '+os.environ['THIS_KITE_PERIOD']+'\n');"

    - name: Log success
      run: |
        echo "✅ Successfully triggered all child jobs with valid Kite token"
        

  # Job that runs when token validation fails
  token-validation-failed:
    needs: [holiday-check, get-kite-token]
    if: (needs.holiday-check.outputs.is_holiday == 'false' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && needs.get-kite-token.outputs.token_valid == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: Token validation failed
      run: |
        echo "❌ Kite token validation failed. Stopping execution."
        echo "The token obtained from 'pkkite --token' is not a valid base64 string."
        echo "This could be due to authentication issues or Kite API problems."
        exit 1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create .env.dev file with secrets
      env:
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        KTOKEN: ${{ needs.get-kite-token.outputs.kite_token }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
        BBTOKEN: ${{ secrets.BBTOKEN }}
        Tel_API_ID: ${{ secrets.Tel_API_ID }}
        Tel_API_Hash: ${{ secrets.Tel_API_Hash }}
        Tel_Phone_Number: ${{ secrets.Tel_Phone_Number }}
        TEL_SESSION_DATA: ${{ secrets.TEL_SESSION_DATA }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        KTOKEN=$KTOKEN
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        BBTOKEN=$BBTOKEN
        Tel_API_ID=$Tel_API_ID
        Tel_API_Hash=$Tel_API_Hash
        Tel_Phone_Number=$Tel_Phone_Number
        TEL_SESSION_DATA=$TEL_SESSION_DATA
        EOF
        
        echo "Created .env.dev file with secrets"

    - name: Send notification about the trigger failure
      shell: bash
      env:
          THIS_KITE_PERIOD : ${{ github.event.inputs.periods }}
          THIS_KITE_TOKEN: ${{ needs.get-kite-token.outputs.kite_token }}
      run: |
        pip install pkdevtools
        cp .env.dev pkbrokers/kite/examples/.env.dev
        cd pkbrokers/kite/examples/
        python3 -c "import os; from PKDevTools.classes.Telegram import send_message; send_message('❌ Kite token validation failed. Stopping execution. Kite token:(' + os.environ['THIS_KITE_TOKEN'] + ') for period: '+os.environ['THIS_KITE_PERIOD']+'\n');"

