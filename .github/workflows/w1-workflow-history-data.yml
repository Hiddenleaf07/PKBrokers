name: PKBrokers Historical Data Update - Sequential
on:
  schedule:
    - cron: '59 9 * * 1-6'  # Monday-Saturday at 3:30 PM IST, 10AM UTC
  workflow_dispatch:  # Allow manual triggering
    inputs:
      logLevel:
        description: 'Log level for PKDevTools (default 20)'
        required: false
        default: 20
        type: number
      periods:
        description: 'Comma-separated history periods in execution order'
        required: false
        default: 'day,minute,5minute,10minute,15minute,30minute,60minute'
        type: string

jobs:
  holiday-check:
    runs-on: ubuntu-latest
    outputs:
      is_holiday: ${{ steps.check_holiday.outputs.is_holiday }}
    steps:
    - name: Check for holidays
      id: check_holiday
      run: |
        # Download the holidays JSON file
        curl -s -o holidays.json https://raw.githubusercontent.com/pkjmesra/PKScreener/main/.github/dependencies/nse-holidays.json
        
        # Get current date in DD-MMM-YYYY format (e.g., 26-Jan-2025)
        CURRENT_DATE=$(date +"%d-%b-%Y")
        
        # Check if current date is in holidays list
        if jq -e --arg date "$CURRENT_DATE" '.CM[] | select(.tradingDate == $date)' holidays.json > /dev/null; then
          echo "Today ($CURRENT_DATE) is a market holiday. Exiting."
          echo "is_holiday=true" >> $GITHUB_OUTPUT
        else
          echo "Today ($CURRENT_DATE) is not a market holiday. Proceeding."
          echo "is_holiday=false" >> $GITHUB_OUTPUT
        fi

  # Define each period as a separate job with explicit dependencies
  historical-day:
    needs: holiday-check
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: day
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for day
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=day --verbose

  historical-minute:
    needs: historical-day  # Depends on day job completing first
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=minute --verbose

  historical-5minute:
    needs: historical-minute  # Depends on minute job
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: 5minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for 5minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=5minute --verbose

  # Continue this pattern for 10minute, 15minute, 30minute, 60minute
  historical-10minute:
    needs: historical-5minute
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: 10minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for 5minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=5minute --verbose

  historical-15minute:
    needs: historical-10minute
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: 15minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for 5minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=5minute --verbose

  historical-30minute:
    needs: historical-15minute
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: 30minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for 5minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=5minute --verbose

  historical-60minute:
    needs: historical-30minute
    if: needs.holiday-check.outputs.is_holiday == 'false' || github.event.name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PKDevTools_Default_Log_Level: ${{ github.event.inputs.logLevel || '20' }}
      PERIOD: 60minute
    steps:
    - name: Checkout PKBrokers code
      uses: actions/checkout@v4
      with:
        repository: pkjmesra/PKBrokers
        ref: main
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -e . kiteconnect
    - name: Create .env.dev file
      env:
        # Map all PKBrokers related secrets to environment variables
        CHAT_ID: ${{ secrets.CHAT_ID }}
        TOKEN: ${{ secrets.TOKEN }}
        chat_idADMIN: ${{ secrets.chat_idADMIN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TURSO_TOKEN: ${{ secrets.TURSO_TOKEN }}
        TDU: ${{ secrets.TDU }}
        TAT: ${{ secrets.TAT }}
        MCU: ${{ secrets.MCU }}
        MCAP: ${{ secrets.MCAP }}
        MCL: ${{ secrets.MCL }}
        MS: ${{ secrets.MS }}
        PKG: ${{ secrets.PKG }}
        REPO_URL: ${{ secrets.REPO_URL }}
        KTOKEN: ${{ secrets.KTOKEN }}
        KUSER: ${{ secrets.KUSER }}
        KPWD: ${{ secrets.KPWD }}
        KTOTP: ${{ secrets.KTOTP }}
        DB_TYPE: ${{ secrets.DB_TYPE }}
        TBTOKEN: ${{ secrets.TBTOKEN }}
      run: |
        cat > .env.dev << EOF
        CHAT_ID=$CHAT_ID
        TOKEN=$TOKEN
        chat_idADMIN=$chat_idADMIN
        GITHUB_TOKEN=$GITHUB_TOKEN
        TURSO_TOKEN=$TURSO_TOKEN
        TDU=$TDU
        TAT=$TAT
        MCU=$MCU
        MCAP=$MCAP
        MCL=$MCL
        MS=$MS
        PKG=$PKG
        REPO_URL=$REPO_URL
        KTOKEN=$KTOKEN
        KUSER=$KUSER
        KPWD=$KPWD
        KTOTP=$KTOTP
        DB_TYPE=$DB_TYPE
        TBTOKEN=$TBTOKEN
        PERIOD=${{ env.period }}
        PKDevTools_Default_Log_Level=${{ env.PKDevTools_Default_Log_Level }}
        EOF
        
        echo "Created .env.dev file for period: ${{ env.period }}"
        echo "Set PKDevTools_Default_Log_Level to ${{ env.PKDevTools_Default_Log_Level }}"
    - name: Run historical data for 5minute
      run: |
        cd pkbrokers/kite/examples/
        python pkkite.py --history=5minute --verbose
